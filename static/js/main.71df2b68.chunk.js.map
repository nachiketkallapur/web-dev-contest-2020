{"version":3,"sources":["components/title-component/title-component.jsx","components/bottom-component/bottom-component.jsx","App.js","serviceWorker.js","components/myparticles-component/myparticles-component.jsx","index.js"],"names":["Title","className","BottomBar","href","src","height","width","App","Boolean","window","location","hostname","match","MyParticles","params","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAWeA,MARf,WACI,OACI,6BACI,4BAAI,gCAAQ,uBAAGC,UAAU,SAAb,sD,MCWTC,MAdf,WACI,OACI,yBAAKD,UAAU,cAEX,6EACA,oEAEA,uBAAGE,KAAK,6BAA4B,yBAAKC,IAAI,eAAeC,OAAO,KAAKC,MAAM,OAA9E,YACA,uBAAGH,KAAK,8BAA6B,yBAAKC,IAAI,gBAAgBC,OAAO,KAAKC,MAAM,OAAhF,YACA,uBAAGH,KAAK,4BAA2B,yBAAKC,IAAI,cAAcC,OAAO,KAAKC,MAAM,OAA5E,cCEKC,MAPjB,WACE,OACE,6BACE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCeSC,MA9Bf,WACI,OACI,6BACI,kBAAC,IAAD,CAAWZ,UAAU,YACvBa,OAAQ,CACA,UAAa,CACb,OAAU,CACV,MAAS,KAET,KAAQ,CACR,MAAS,IAGT,cAAiB,CACjB,OAAU,CACV,QAAW,CACX,QAAU,EACV,KAAQ,cAMdR,MAAO,OACPD,OAAO,YClBnBU,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,WAChDH,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SACvDH,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,eFwH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71df2b68.chunk.js","sourcesContent":["import React from 'react'\r\nimport './title-component.css'\r\n\r\nfunction Title() {\r\n    return (\r\n        <div>\r\n            <h2><center><p className=\"title\">RVVP | Rashtreeya Vidyalaya Vidyarthi Parishad</p></center></h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React from 'react'\r\nimport './bottom-component.css'\r\n\r\nfunction BottomBar() {\r\n    return (\r\n        <div className=\"bottom-bar\">\r\n            \r\n            <p>RVVP | Rashtreeya Vidyalaya Vidyarthi Parishad</p>\r\n            <p>R V College of Engineering, Bengaluru</p>\r\n            \r\n            <a href=\"https://www.facebook.com/\"><img src=\"facebook.jpg\" height=\"32\" width=\"32\"/>        </a>\r\n            <a href=\"https://www.instagram.com/\"><img src=\"instagram.jpg\" height=\"32\" width=\"32\"/>        </a> \r\n            <a href=\"https://www.twitter.com/\"><img src=\"twitter.jpg\" height=\"32\" width=\"32\"/>        </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomBar\r\n            \r\n","import React from 'react';\nimport './App.css';\nimport Title from './components/title-component/title-component.jsx';\nimport BottomBar from './components/bottom-component/bottom-component';\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n    </div>\n    );\n  }\n  export default App;\n  \n             \n  \n  \n  \n  // <div className=\"App\">\n  //   <header className=\"App-header\">\n  //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //     <p>\n  //       Edit <code>src/App.js</code> and save to reload.\n  //     </p>\n  //     <a\n  //       className=\"App-link\"\n  //       href=\"https://reactjs.org\"\n  //       target=\"_blank\"\n  //       rel=\"noopener noreferrer\"\n  //     >\n  //       Learn React\n  //     </a>\n  //   </header>\n  // </div>\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport Particles from 'react-particles-js' \r\nimport './myparticles-component.css'\r\nfunction MyParticles() {\r\n    return (\r\n        <div>\r\n            <Particles className=\"particles\"\r\n          params={{\r\n                  \"particles\": {\r\n                  \"number\": {\r\n                  \"value\": 100\r\n                  },\r\n                  \"size\": {\r\n                  \"value\": 3\r\n                  } \r\n                  },\r\n                  \"interactivity\": {\r\n                  \"events\": {\r\n                  \"onhover\": {\r\n                  \"enable\": false,\r\n                  \"mode\": \"repulse\"\r\n                  }\r\n                  }\r\n                  }\r\n                  }\r\n                }\r\n            width= \"auto\"\r\n            height=\"100vh\" \r\n          /> \r\n        </div>\r\n    )\r\n}\r\n \r\nexport default MyParticles\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Particles from \"react-particles-js\";\nimport BottomBar from './components/bottom-component/bottom-component';\nimport MyParticles from './components/myparticles-component/myparticles-component';\n\nReactDOM.render(<App />,document.getElementById('header'));\nReactDOM.render(<MyParticles/>,document.getElementById('root'));\nReactDOM.render(<BottomBar/>,document.getElementById('bottom-bar'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}